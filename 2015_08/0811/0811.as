import com.greensock.TweenMax;import com.greensock.easing.*;var bg:MovieClip = new MovieClip();addChild(bg);var shadowBox:MovieClip = new MovieClip();addChild(shadowBox);var box:MovieClip = new MovieClip();addChild(box);var pointArr:Array = [];var footArr:Array = [];var shadowArr:Array = [];var xArr:Array = [];var yArr:Array = [];var order:Array = [0, 3, 1, 2];var center = creatPoint();var shadowX:Number = 0.05;var shadowY:Number = 0.3;var stepRange:Number = 60;//步长var point = new PerspectiveProjection();point.projectionCenter = new Point(stage.stageWidth/2, stage.stageHeight/2);point.fieldOfView = 1;this.transform.perspectiveProjection = point;function creatPoint():Shape{	var foo:Shape = new Shape();	foo.graphics.lineStyle(2, 0, 1);	foo.graphics.drawCircle(0, 0, 4);	foo.graphics.endFill();	return foo;}for (var i:int = 0; i < 8; i++){	pointArr.push(creatPoint());	box.addChild(pointArr[i]);	pointArr[i].visible = false;}function init(){	center.x = 200, center.y = 200, center.z = -200;	pointArr[0].x = 100, pointArr[0].y = 100;	pointArr[1].x = 300, pointArr[1].y = 100;	pointArr[2].x = 300, pointArr[2].y = 300;	pointArr[3].x = 100, pointArr[3].y = 300;	pointArr[4].x = (pointArr[0].x + pointArr[1].x + 400) / 4, pointArr[4].y = (pointArr[0].y + pointArr[1].y + 400) / 4, pointArr[4].z = -100;	pointArr[5].x = (pointArr[1].x + pointArr[2].x + 400) / 4, pointArr[5].y = (pointArr[1].y + pointArr[2].y + 400) / 4, pointArr[5].z = -100;	pointArr[6].x = (pointArr[2].x + pointArr[3].x + 400) / 4, pointArr[6].y = (pointArr[2].y + pointArr[3].y + 400) / 4, pointArr[6].z = -100;	pointArr[7].x = (pointArr[3].x + pointArr[0].x + 400) / 4, pointArr[7].y = (pointArr[3].y + pointArr[0].y + 400) / 4, pointArr[7].z = -100;	for(var i:int = 0; i < 4; i++)	{		footArr.push(pointArr[i]);		xArr.push(pointArr[i].x);		yArr.push(pointArr[i].y);	}		for(var j:int = 0; j < 40; j++)	{		bg.graphics.lineStyle(stepRange * 0.4, 0x888888 * (j % 2) + 0x777777, 1);		bg.graphics.moveTo(0, j * stepRange * 0.4);		bg.graphics.lineTo(400, j * stepRange * 0.4);			}}init();drawLine();function drawLine(_b:Number = 4, _c:uint = 0, _a:Number = 1){	pointArr[4].x = (pointArr[0].x + pointArr[1].x + 400) / 4, pointArr[4].y = (pointArr[0].y + pointArr[1].y + 400) / 4;	pointArr[5].x = (pointArr[1].x + pointArr[2].x + 400) / 4, pointArr[5].y = (pointArr[1].y + pointArr[2].y + 400) / 4;	pointArr[6].x = (pointArr[2].x + pointArr[3].x + 400) / 4, pointArr[6].y = (pointArr[2].y + pointArr[3].y + 400) / 4;	pointArr[7].x = (pointArr[3].x + pointArr[0].x + 400) / 4, pointArr[7].y = (pointArr[3].y + pointArr[0].y + 400) / 4;		box.graphics.lineStyle(_b, _c, _a);		box.graphics.beginFill(0xF6F6F6, 1);	box.graphics.moveTo(200, 200);	box.graphics.lineTo(pointArr[0].x, pointArr[0].y);	box.graphics.lineTo(pointArr[4].x, pointArr[4].y);	box.graphics.lineTo(200, 200);		box.graphics.beginFill(0xFFFFFF, 1);	box.graphics.moveTo(200, 200);	box.graphics.lineTo(pointArr[1].x, pointArr[1].y);	box.graphics.lineTo(pointArr[4].x, pointArr[4].y);	box.graphics.lineTo(200, 200);		box.graphics.beginFill(0xDDDDDD, 1);	box.graphics.moveTo(200, 200);	box.graphics.lineTo(pointArr[1].x, pointArr[1].y);	box.graphics.lineTo(pointArr[5].x, pointArr[5].y);	box.graphics.lineTo(200, 200);		box.graphics.beginFill(0xEEEEEE, 1);	box.graphics.moveTo(200, 200);	box.graphics.lineTo(pointArr[2].x, pointArr[2].y);	box.graphics.lineTo(pointArr[5].x, pointArr[5].y);	box.graphics.lineTo(200, 200);		box.graphics.beginFill(0xAAAAAA, 1);	box.graphics.moveTo(200, 200);	box.graphics.lineTo(pointArr[2].x, pointArr[2].y);	box.graphics.lineTo(pointArr[6].x, pointArr[6].y);	box.graphics.lineTo(200, 200);		box.graphics.beginFill(0x999999, 1);	box.graphics.moveTo(200, 200);	box.graphics.lineTo(pointArr[3].x, pointArr[3].y);	box.graphics.lineTo(pointArr[6].x, pointArr[6].y);	box.graphics.lineTo(200, 200);		box.graphics.beginFill(0xEEEEEE, 1);	box.graphics.moveTo(200, 200);	box.graphics.lineTo(pointArr[3].x, pointArr[3].y);	box.graphics.lineTo(pointArr[7].x, pointArr[7].y);	box.graphics.lineTo(200, 200);		box.graphics.beginFill(0xCCCCCC, 1);	box.graphics.moveTo(200, 200);	box.graphics.lineTo(pointArr[0].x, pointArr[0].y);	box.graphics.lineTo(pointArr[7].x, pointArr[7].y);	box.graphics.lineTo(200, 200);		}function drawShadow(_c:uint = 0, _a:Number = 1){	shadowBox.graphics.beginFill(_c, _a);	shadowBox.graphics.moveTo(pointArr[0].x - pointArr[0].z * shadowX, pointArr[0].y - pointArr[0].z * shadowY);	shadowBox.graphics.lineTo(pointArr[4].x - pointArr[4].z * shadowX, pointArr[4].y - pointArr[4].z * shadowY);	shadowBox.graphics.lineTo(pointArr[1].x - pointArr[1].z * shadowX, pointArr[1].y - pointArr[1].z * shadowY);	shadowBox.graphics.lineTo(pointArr[5].x - pointArr[5].z * shadowX, pointArr[5].y - pointArr[5].z * shadowY);	shadowBox.graphics.lineTo(pointArr[2].x - pointArr[2].z * shadowX, pointArr[2].y - pointArr[2].z * shadowY);	shadowBox.graphics.lineTo(pointArr[6].x - pointArr[6].z * shadowX, pointArr[6].y - pointArr[6].z * shadowY);	shadowBox.graphics.lineTo(pointArr[3].x - pointArr[3].z * shadowX, pointArr[3].y - pointArr[3].z * shadowY);	shadowBox.graphics.lineTo(pointArr[7].x - pointArr[7].z * shadowX, pointArr[7].y - pointArr[7].z * shadowY);	shadowBox.graphics.lineTo(pointArr[0].x - pointArr[0].z * shadowX, pointArr[0].y - pointArr[0].z * shadowY);}addEventListener(Event.ENTER_FRAME, Draw);function Draw(e:Event){	box.graphics.clear();	shadowBox.graphics.clear();	drawLine(1, 0, 0);	drawShadow(0, 0.6);}run()function run(){	for(var i:int = 0; i < 4; i++)	{		TweenMax.to(footArr[order[i]], 0.3, {z:-80, delay:0.5 * i, ease:Quad.easeIn, overwrite:false});		TweenMax.to(footArr[order[i]], 0.3, {z:0, delay:0.3 + 0.5 * i, ease:Quad.easeOut, overwrite:false});				TweenMax.to(footArr[order[i]], 0.6, {y:yArr[order[i]] - stepRange / 2, delay:0.5 * i, ease:Sine.easeInOut, overwrite:false});		TweenMax.to(footArr[order[i]], 1, {y:yArr[order[i]] + stepRange / 2, delay:0.6 + 0.5 * i, ease:Linear.easeNone, overwrite:false});	}		TweenMax.fromTo(bg, 1.6, {y:-100}, {y:-100 + stepRange * 1.6, ease:Linear.easeNone, onComplete:run})}