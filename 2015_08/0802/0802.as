import com.greensock.TweenMax;import com.greensock.easing.*;var ballR:int = 60;var ball = creatBall();TweenMax.to(ball, 0, {x:200, y:200, blurFilter:{blurX:1, blurY:1}});var lineBox:MovieClip = new MovieClip();addChild(lineBox);addChild(ball);Mouse.hide();function creatBall():Shape{	var foo:Shape = new Shape();	var color:uint = 0xFFFFFF;	foo.graphics.lineStyle(4, color, 1, false, "normal", CapsStyle.NONE, JointStyle.MITER);	foo.graphics.moveTo(ballR, 0);	for(var i:int = 0; i < 360; i+=4)	{		color = 0xFFFFFF * (int(i / 6) % 2);		foo.graphics.lineStyle(4, color, 1, false, "normal", CapsStyle.NONE, JointStyle.BEVEL);		foo.graphics.lineTo(Math.cos(i * Math.PI / 180) * ballR, Math.sin(i * Math.PI / 180) * ballR)	}	foo.graphics.endFill();	return foo;}addEventListener(Event.ENTER_FRAME, drawLine);function drawLine(e:Event){	//mouseX = mouseX, mouseY = mouseY;		lineBox.graphics.clear();	lineBox.graphics.lineStyle(1, 0xFFFFFF, 1);	lineBox.graphics.moveTo(ball.x, ball.y);	lineBox.graphics.lineTo(ball.x, mouseY);		if(Point.distance(new Point(ball.x, ball.y), new Point(ball.x, mouseY)) > ballR)	{		cutCircle()	}	else	{		randomColor();	}};function cutCircle(){	var range:Number = Point.distance(new Point(ball.x, ball.y), new Point(ball.x, mouseY));	var _angle:Number = Math.acos(ballR / range) / Math.PI * 180;	//t.text = "" + int(_angle * 100) / 100;	var _mouseAngle:Number = Math.atan2(mouseY - ball.y, ball.x - ball.x) / Math.PI * 180;	//t.text = "" + int(_mouseAngle * 100) / 100;		var _pL:Point = new Point(ball.x + Math.cos((_mouseAngle + _angle) * Math.PI / 180) * ballR, ball.y + Math.sin((_mouseAngle + _angle) * Math.PI / 180) * ballR);	var _pR:Point = new Point(ball.x + Math.cos((_mouseAngle - _angle) * Math.PI / 180) * ballR, ball.y + Math.sin((_mouseAngle - _angle) * Math.PI / 180) * ballR);		lineBox.graphics.moveTo(ball.x, ball.y);	lineBox.graphics.lineTo(_pR.x, _pR.y);	lineBox.graphics.lineTo(ball.x, mouseY);	lineBox.graphics.lineTo(ball.x, mouseY);		lineBox.graphics.moveTo(ball.x, ball.y);	lineBox.graphics.lineTo(_pL.x, _pL.y);	lineBox.graphics.lineTo(ball.x, mouseY);	lineBox.graphics.lineTo(ball.x, mouseY);		lineBox.graphics.moveTo(_pL.x, _pL.y);	lineBox.graphics.lineTo(_pR.x, _pR.y);		lineBox.graphics.endFill();		var _bmd:BitmapData = new BitmapData(400, 400, false, 0x000000);	_bmd.draw(root);	var _range = Point.distance(_pL, _pR); 	var _percent:Number = 0;		this.graphics.clear();	this.graphics.moveTo(0, 0);	for(var i:int = 0; i < 201; i++)	{		var tempAngle = _mouseAngle + _angle - (_angle * 2 / 200) * i;		var xPoint = new Point(ball.x + Math.cos(tempAngle * Math.PI / 180) * ballR, ball.y + Math.sin(tempAngle * Math.PI / 180) * ballR);		var _color = _bmd.getPixel(xPoint.x, xPoint.y);		var tempAngle2 = Math.atan2(xPoint.y - mouseY, xPoint.x - ball.x);		this.graphics.lineStyle(60, _color, 1, false, "normal", CapsStyle.NONE);		this.graphics.lineTo(2 * i, 0);		//percent = Point.distance(_pL, )	}	}function randomColor(){	this.graphics.clear();	this.graphics.moveTo(0, 0);	for(var i:int = 0; i < 201; i++)	{		var tempColor = uint(Math.random() * 0xFF);		var _color = tempColor * 0x10101		this.graphics.lineStyle(60, _color, 1, false, "normal", CapsStyle.NONE);		this.graphics.lineTo(2 * i, 0);		//percent = Point.distance(_pL, )	}}