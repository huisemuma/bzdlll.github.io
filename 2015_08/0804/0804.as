import com.greensock.TweenMax;import com.greensock.easing.*;var r:Number = 80;var R:Number = 100;var pointArr:Array = [];var stickUp = creatStick();var stickDown = creatStick();var rate:Number = 1;//addChild(stickUp);//addChild(stickDown);stickDown.x = 200, stickDown.y = 350, stickDown.scaleX = 1.2;stickUp.x = 200, stickUp.y = 150, stickUp.scaleX = 0.4;for(var i:int = 0; i < 8; i++){	pointArr.push(new Point(0, 0));}function creatStick():Shape{	var foo:Shape = new Shape();	foo.graphics.lineStyle(4, 0xFFFFFF, 1);	foo.graphics.drawCircle(0, 0, 8);	foo.graphics.endFill();	foo.graphics.moveTo(-R, 0);	foo.graphics.lineTo(R, 0);	//	return foo;}function drawLine(e:Event = null){	pointArr[0].x = stickUp.x + Math.cos((stickUp.rotation + 180) * Math.PI / 180) * r;	pointArr[0].y = stickUp.y + Math.sin((stickUp.rotation + 180) * Math.PI / 180) * r;		pointArr[1].x = stickUp.x + Math.cos(stickUp.rotation * Math.PI / 180) * r;	pointArr[1].y = stickUp.y + Math.sin(stickUp.rotation * Math.PI / 180) * r;		pointArr[2].x = stickDown.x + stickDown.width / 2;	pointArr[2].y = 350;		pointArr[3].x = stickDown.x - stickDown.width / 2;	pointArr[3].y = 350;		pointArr[4].x = (pointArr[0].x + pointArr[1].x) / 2;	pointArr[4].y = (pointArr[0].y + pointArr[1].y) / 2;		pointArr[5].x = (pointArr[1].x + pointArr[2].x) / 2;	pointArr[5].y = (pointArr[1].y + pointArr[2].y) / 2;		pointArr[6].x = (pointArr[2].x + pointArr[3].x) / 2;	pointArr[6].y = (pointArr[2].y + pointArr[3].y) / 2;		pointArr[7].x = (pointArr[3].x + pointArr[0].x) / 2;	pointArr[7].y = (pointArr[3].y + pointArr[0].y) / 2;		this.graphics.clear();	this.graphics.beginFill(0xFFFFFF, 1);	this.graphics.moveTo(pointArr[4].x, pointArr[4].y);	this.graphics.curveTo(pointArr[1].x, pointArr[1].y, pointArr[5].x, pointArr[5].y);	this.graphics.curveTo(pointArr[2].x, pointArr[2].y, pointArr[6].x, pointArr[6].y);	this.graphics.curveTo(pointArr[3].x, pointArr[3].y, pointArr[7].x, pointArr[7].y);	this.graphics.curveTo(pointArr[0].x, pointArr[0].y, pointArr[4].x, pointArr[4].y);			}addEventListener(Event.ENTER_FRAME, drawLine);run()function run(){	TweenMax.to(stickUp, 1 * rate, {x:180, ease:Sine.easeInOut, overwrite:false});	TweenMax.to(stickUp, 1 * rate, {x:220, ease:Sine.easeInOut, delay:1 * rate, overwrite:false});	TweenMax.to(stickUp, 0.5 * rate, {y:220, ease:Sine.easeInOut, delay:0 * rate, overwrite:false});	TweenMax.to(stickUp, 0.5 * rate, {y:150, ease:Sine.easeInOut, delay:0.5 * rate, overwrite:false});	TweenMax.to(stickUp, 0.5 * rate, {y:220, ease:Sine.easeInOut, delay:1 * rate, overwrite:false});	TweenMax.to(stickUp, 0.5 * rate, {y:150, ease:Sine.easeInOut, delay:1.5 * rate, overwrite:false});		TweenMax.to(stickDown, 0.5 * rate, {scaleX:1.6, ease:Sine.easeInOut, delay:0 * rate, overwrite:false});	TweenMax.to(stickDown, 0.5 * rate, {scaleX:1.2, ease:Sine.easeInOut, delay:0.5 * rate, overwrite:false});	TweenMax.to(stickDown, 0.5 * rate, {scaleX:1.6, ease:Sine.easeInOut, delay:1 * rate, overwrite:false});	TweenMax.to(stickDown, 0.5 * rate, {scaleX:1.2, ease:Sine.easeInOut, delay:1.5 * rate, overwrite:false});		TweenMax.to(stickUp, 1 * rate, {rotation:40, ease:Sine.easeInOut, overwrite:false});	TweenMax.to(stickUp, 1 * rate, {rotation:-40, delay:1 * rate, ease:Sine.easeInOut, overwrite:false, onComplete:run});	}